{
	"info": {
		"_postman_id": "5656c393-a2e9-4c3f-b29e-530d93e39daa",
		"name": "Domashka_31_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19717129"
	},
	"item": [
		{
			"name": "first",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200 (2)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let pars_resp = pm.response.json() //конвертация в json\r",
							"console.log(\"Response\", pars_resp) //выводим в консоль данные\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"console.log(\"Name is response\", pars_resp.name) //забираем из данных name\r",
							"\r",
							"pm.test(\"Hand made\", function() {\r",
							"    pm.expect(pars_resp.name).to.equal(\"Vadim\")\r",
							"})\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age made\", function() {\r",
							"    pm.expect(+pars_resp.age).to.equal(35)\r",
							"})\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary made\", function() {\r",
							"    pm.expect(pars_resp.salary).to.equal(1000)\r",
							"})   \r",
							"// 7. Спарсить request.\r",
							"let pars_requst = request.data\r",
							"console.log(\"Parsing request\", pars_requst)\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Salary made\", function() {\r",
							"    pm.expect(pars_resp.name).to.equal(pars_requst.name)\r",
							"})\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age is request\", function(){\r",
							"    pm.expect(pars_resp.age).to.equal(pars_requst.age)\r",
							"})\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary is request\", function(){\r",
							"    pm.expect(pars_resp.salary).to.equal(+pars_requst.salary)\r",
							"})\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(\"Family is response\", pars_resp.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"U Salary 1_5\", function(){\r",
							"    pm.expect(+pars_resp.family.u_salary_1_5_year).to.equal(+pars_requst.salary * 4)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vadim",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. Спарсить response body в json.\r",
							"let resp_body = pm.response.json()\r",
							"console.log(\"Body response\", resp_body)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req_2 = pm.request.url.query.all()\r",
							"console.log(\"Request bez body\", req_2)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name is equal name from\", function() {\r",
							"    pm.expect(req_2[0].value).to.equal(resp_body.name)\r",
							"})\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let age_from_request = pm.request.url.query.get(\"age\")\r",
							"console.log(\"\", age_from_request)\r",
							"\r",
							"pm.test(\"Age from request\", function() {\r",
							"    pm.expect(age_from_request).to.equal(resp_body.age)\r",
							"})\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary from request_2\", function() {\r",
							"    pm.expect(+req_2[2].value).to.equal(resp_body.salary)\r",
							"})\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(resp_body.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog\", function() {\r",
							"    pm.expect(resp_body.family.pets.dog).to.have.property(\"name\")\r",
							"})\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog_age\", function() {\r",
							"    pm.expect(resp_body.family.pets.dog).to.have.property(\"age\")\r",
							"})\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog_Luky\", function() {\r",
							"    pm.expect(resp_body.family.pets.dog.name).to.equal(\"Luky\")\r",
							"})\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"tests[\"is age equal four\"] = resp_body.family.pets.dog.age == 4;\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Vadim&age=35&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadim"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. Спарсить response body в json.\r",
							"let pars_response = pm.response.json();\r",
							"console.log('response', pars_response);\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let pars_requst = pm.request.url.query.all();\r",
							"console.log('request', pars_requst)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Name is request',function() {\r",
							"    pm.expect(pars_requst[0].value).to.eql(pars_response. name);\r",
							"} )\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test('Age from request',function() {\r",
							"    pm.expect(+pars_requst[1].value).to.eql(+pars_response. age);\r",
							"} )\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(pars_requst[2].value);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(pars_response.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(pars_response.salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(pars_response.salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(pars_response.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test('Zero salary',function() {\r",
							"    pm.expect(+pars_response.salary[0]).to.eql(+pars_requst[2].value);\r",
							"} )\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('First iz salary*2',function() {\r",
							"    pm.expect(+pars_response.salary[1]).to.eql(+pars_requst[2].value*2);\r",
							"} )\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test('Second iz salary', function() {\r",
							"    pm.expect(pars_response.salary[2]).to.eql(pars_requst[2].value*3)\r",
							"})\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// pm.environment.set('name');\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Vadim\")\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", 35)\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", 1000)\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vadim",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "35",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Vadim&age=35&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadim"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set('url', 'http://162.55.220.72:5005/');\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"// 6. Спарсить response body в json.\r",
							"let pars_response_1 = pm.response.json();\r",
							"console.log(\"Body to js\", pars_response_1)\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let pars_request_1 = request.data;\r",
							"console.log('', pars_request_1);\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test('js resp start', function () {\r",
							"    pm.expect(pars_response_1).to.have.property('start_qa_salary');\r",
							"})\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test('js resp start after_6', function () {\r",
							"    pm.expect(pars_response_1).to.have.property('qa_salary_after_6_months');\r",
							"})\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test('js resp start after_12', function () {\r",
							"    pm.expect(pars_response_1).to.have.property('qa_salary_after_12_months');\r",
							"})\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test('js resp start after_1_5_year', function () {\r",
							"    pm.expect(pars_response_1).to.have.property('qa_salary_after_1.5_year');\r",
							"})\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test('js resp start after_3_5_year', function () {\r",
							"    pm.expect(pars_response_1).to.have.property('qa_salary_after_3.5_years');\r",
							"})\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test('js resp has resp person', function () {\r",
							"    pm.expect(pars_response_1).to.have.property('person');\r",
							"})\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test('start_qa_has_salary_from_req', function () {\r",
							"    pm.expect(pars_response_1.start_qa_salary).to.eql(+pars_request_1.salary);\r",
							"})\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('start_qa_has_salary_from_req', function () {\r",
							"    pm.expect(pars_response_1.qa_salary_after_6_months).to.eql(+pars_request_1.salary*2);\r",
							"})\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test('start_qa_has_salary_from_req', function () {\r",
							"    pm.expect(pars_response_1.qa_salary_after_12_months).to.eql(+pars_request_1.salary*2.7);\r",
							"})\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_1.5_year', function () {\r",
							"    pm.expect(pars_response_1['qa_salary_after_1.5_year']).to.eql(+pars_request_1.salary*3.3);\r",
							"})\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_3.5_years', function () {\r",
							"    pm.expect(pars_response_1['qa_salary_after_3.5_years']).to.eql(+pars_request_1.salary*3.8);\r",
							"})\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test('', function () {\r",
							"    pm.expect(pars_response_1['qa_salary_after_3.5_years']).to.eql(+pars_request_1.salary*3.8);\r",
							"})\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.')\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}